<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Save My Kindle: Make EPUBs with JS</title>
    <link href="/StaticBlog/en/2022/04/24/dmzjReader/"/>
    <url>/StaticBlog/en/2022/04/24/dmzjReader/</url>
    
    <content type="html"><![CDATA[<h1 id="data-source"><a href="#data-source" class="headerlink" title="data source"></a>data source</h1><p>Looking at the client of DMZJ (a Chinese website for manga &amp; novel) has long been unhappy, it is better to bully this APK while is not confuscated enough, and use their API to play with myself. With the idea of ​​resurrecting my seven-year-old Kindle, this time I will catch an anime one. Home light novel source, make it an e-book for it to read (why don’t you catch comics? Don’t ask is today’s World Book Day). Although Anime Home has a lot of Chinese light novel resources, its mobile reading experience is not flattering, and the full-screen advertisements on the web basically cut off the possibility of reading with the slow and stuck browser of Kindle. The original idea is to host a web page locally and make a static reading page suitable for the Kindle browser through the DMZJ API (for performance reasons, it is best to directly disable the JavaScript of the Kindle browser). So I quickly thought that since the API is already available, wouldn’t it be beautiful to just pick it up and make an e-book and send it over? Anyway, everything is difficult at the beginning, as long as you get the API, the rest of the client, the web or the local storage can be easily at your fingertips. Of course, judging from the demise history of several versions of DMZJ clients that I have witnessed on the Windows UWP side, their APIs still change frequently, so it is better to store them locally.</p><p>As mentioned earlier, DMZJ’s API has been crawled at least a few years ago, so there have been numerous third-party API-based clients, and there are still APIs available on GitHub in 2021. But unfortunately, the results of the packet capture now show that the previous API is outdated, at least in the comic/novel chapter section, DMZJ’s API has introduced new encryption. <img src="image-20220424174404514.png" alt="image-20220424174404514" style="zoom:50%;" /></p><img src="image-20220424161305785.png" alt="image-20220424161305785" style="zoom: 50%;" /><p>So sacrificed <code>jadx</code>, directly decompiled to see its novel details page <code>NovelInstructionActivity</code> source code. We can see that the basic information interface of the novel is encrypted.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">refresh</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> z)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.mNovelProtocol.setPathParam(<span class="hljs-keyword">this</span>.intent_extra_nid);<br>        AppBeanFunctionUtils.setCommentRequestException(getActivity(), <span class="hljs-keyword">this</span>.mNovelProtocol);<br>        MyNetClient.getInstance().getNovel(<span class="hljs-keyword">this</span>.intent_extra_nid, <span class="hljs-keyword">new</span> MyCallBack1(getActivity(), <span class="hljs-keyword">new</span> MyCallBack1.B() &#123;<br>            <span class="hljs-comment">/* class com.dmzj.manhua.ui.NovelInstructionActivity.AnonymousClass1 */</span><br><br>            <span class="hljs-meta">@Override</span> <span class="hljs-comment">// com.dmzj.manhua.net.MyCallBack1.B</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onReceiveData</span><span class="hljs-params">(String str)</span> </span>&#123;<br>                NovelInstructionActivity.<span class="hljs-keyword">this</span>.scrollview.onRefreshComplete();<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">byte</span>[] decryptWithPrivateKeyBlock = RSAUtil.decryptWithPrivateKeyBlock(str);<br>                    JsonFormat jsonFormat = <span class="hljs-keyword">new</span> JsonFormat();<br>                    Novel.NovelInfoResponse parseFrom = Novel.NovelInfoResponse.parseFrom(decryptWithPrivateKeyBlock);<br>                    <span class="hljs-keyword">if</span> (parseFrom.getErrno() == <span class="hljs-number">0</span>) &#123;<br>                        <span class="hljs-keyword">final</span> String printToString = jsonFormat.printToString((Message) parseFrom.getDataOrBuilder());<br>                        NovelInstructionActivity.<span class="hljs-keyword">this</span>.getDefaultHandler().postDelayed(<span class="hljs-keyword">new</span> Runnable() &#123;<br>                            <span class="hljs-comment">/* class com.dmzj.manhua.ui.NovelInstructionActivity.AnonymousClass1.AnonymousClass1 */</span><br><br>                            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                                NovelInstructionActivity.<span class="hljs-keyword">this</span>.refreshBasicInfos(printToString);<br>                            &#125;<br>                        &#125;, <span class="hljs-number">500</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        UIUtils.show(NovelInstructionActivity.<span class="hljs-keyword">this</span>.getActivity(), parseFrom.getErrmsg());<br>                    &#125;<br>                    NovelInstructionActivity.<span class="hljs-keyword">this</span>.ltUnionADPlatform = BrowseAdHelper.setAd(NovelInstructionActivity.<span class="hljs-keyword">this</span>.getActivity(), NovelInstructionActivity.<span class="hljs-keyword">this</span>.layout_ad_layout, <span class="hljs-number">2</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span> <span class="hljs-comment">// com.dmzj.manhua.net.MyCallBack1.B</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onReceiveError</span><span class="hljs-params">(String str, <span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>                NovelInstructionActivity.<span class="hljs-keyword">this</span>.scrollview.onRefreshComplete();<br>            &#125;<br>        &#125;));<br></code></pre></td></tr></table></figure><p>Then we look at its <code>RSAUtil</code>, the private key is in plaintext, you know.</p><p>Simply call it and find that the previously captured request can be decoded normally, and the content should be protobuf.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">object</span> DMZJDecrypter &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">run</span><span class="hljs-params">(ciphertext: <span class="hljs-type">String</span>)</span></span>&#123;<br>        println(<br>            String(RSAUtils.decryptWithPrivateKeyBlock(ciphertext))<br>        )<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="image-20220424174218724.png" alt="image-20220424174218724"></p><p>Use <code>protoc --decode_raw &lt; ~/Downloads/dmzj_resp.bin &gt; ~/Downloads/dmzj_resp.txt</code> to decode, you can see the following structure:</p><img src="image-20220424185604656.png" alt="image-20220424185604656" style="zoom:50%;" /><p>But we also need to find the meaning of these fields. In the apk, we can see three ProtoBuf entity classes generated by <code>protoc</code>:</p><img src="image-20220424185144983.png" alt="image-20220424185144983" style="zoom:50%;" /><p>For example, the Novel type corresponds to three objects NovelChapter, NovelInfo, NovelVolume, and their definitions are similar:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">NovelInfo</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.memoizedIsInitialized = -<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">this</span>.novelId_ = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">this</span>.name_ = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">this</span>.zone_ = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">this</span>.status_ = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">this</span>.lastUpdateVolumeName_ = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">this</span>.lastUpdateChapterName_ = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">this</span>.lastUpdateVolumeId_ = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">this</span>.lastUpdateChapterId_ = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">this</span>.lastUpdateTime_ = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">this</span>.cover_ = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">this</span>.hotHits_ = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">this</span>.introduction_ = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">this</span>.types_ = LazyStringArrayList.EMPTY;<br>            <span class="hljs-keyword">this</span>.authors_ = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">this</span>.firstLetter_ = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">this</span>.subscribeNum_ = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">this</span>.redisUpdateTime_ = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">this</span>.volume_ = Collections.emptyList();<br>        &#125;<br></code></pre></td></tr></table></figure><p>Apparently this corresponds to the structure of protobuf. At this point we can finally use the new version of the DMZJ API.</p><p>The following is the Protobuf IDL example of the DMZJ light novel I summarized:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs idl">syntax = &quot;proto2&quot;;<br><br>package novel;<br><br>message NovelChapterDetail &#123;<br>    required int32 chapterId = 1;<br>    required string chapterName = 2;<br>    required int32 chapterOrder = 3; <br>&#125;<br><br>message NovelVolumeDetail &#123;<br>    required int32 volumeId = 1;<br>    required string volumeName = 2;<br>    required int32 volumeOrder = 3;<br>    repeated NovelChapterDetail chapters = 4;<br>&#125;<br><br>message NovelChapterResponse &#123;<br>    optional int32 errno = 1;<br>    optional string errmsg = 2;<br>    repeated NovelVolumeDetail data = 3;<br>&#125;<br><br>message NovelInfoResponse &#123;<br>    optional int32 errno = 1;<br>    optional string errmsg = 2;<br>    repeated NovelInfo data = 3;<br>&#125;<br><br><br>message NovelVolume &#123;<br>    required int32 volumeId = 1;<br>    required int32 novelId = 2;<br>    required string volumeName = 3;<br>    required int32 volumeOrder = 4;<br>    required uint64 addtime = 5;<br>    required uint32 sumChapters = 6;<br>&#125;<br><br>message NovelInfo &#123;<br>    required int32 novelId = 1;<br>    required string name = 2;<br>    required string zone = 3;<br>    required string status = 4;<br>    required string lastUpdateVolumeName = 5 ;<br>    required string lastUpdateChapterName = 6;<br>    required int32 lastUpdateVolumeId = 7;<br>    required int32 lastUpdateChapterId = 8;<br>    required uint64 lastUpdateTime = 9;<br>    required string cover = 10;<br>    required int32 hotHits = 11;<br>    required string introduction = 12;<br>    repeated string types = 13;<br>    required string authors = 14;<br>    required string firstLetter = 15;<br>    required int32 subscribeNum = 16;<br>    optional uint64 redisUpdateTime = 17; <br>    repeated NovelVolume volume = 18;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>Simply decode it with <code>protobuf.js</code> to get the directory we want:</p><p><img src="image-20220425000148505.png" alt="image-20220425000148505"></p><p>Of course, there is the last step to get the text of the corresponding chapter. This interface needs to be accessed with the <code>volumeId</code> and <code>chapterId</code> obtained in the previous step and the two queries <code>t</code> and <code>k</code>: <code>http://jurisdiction.muwai .com/lnovel/$&#123;volumeId&#125;_$&#123;chapterId&#125;.txt</code>.</p><img src="image-20220425120102467.png" alt="image-20220425120102467" style="zoom:50%;" /><p>As the name suggests, <code>t</code> is the current timestamp, and <code>k</code> should be a random ID generated based on the timestamp, changing any of them, or not uploading will result in a 403.</p><img src="image-20220425120229409.png" alt="image-20220425120229409" style="zoom:50%;" /><p>Decompile <code>NovelBrowsActivity</code>, you can see the logic of chapter refresh:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> NovelDescription.Chapter chapter = <span class="hljs-keyword">this</span>.novelChapters.get(z ? i - <span class="hljs-number">1</span> : i + <span class="hljs-number">1</span>);<br>        loadChapterNovel(<span class="hljs-keyword">null</span>, chapter.getChapter_name(), <span class="hljs-keyword">this</span>.intent_extra_nid, chapter.getVolume_id(), chapter.getChapter_id(), <span class="hljs-keyword">new</span> OnCommenCompleteListener() &#123;<br>            <span class="hljs-comment">/* class com.dmzj.manhua.ui.NovelBrowseActivity.AnonymousClass8 */</span><br><br>            <span class="hljs-meta">@Override</span> <span class="hljs-comment">// com.dmzj.manhua.ui.NovelBrowseActivity.OnCommenCompleteListener</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onComplete</span><span class="hljs-params">(Bundle bundle)</span> </span>&#123;<br>                ...<br>            &#125;<br>        &#125;, <span class="hljs-keyword">false</span>, z);<br></code></pre></td></tr></table></figure><p>In the <code>loadChapterNovel</code> method, we can see the method <code>MyspUtils</code> that splices out the final URL, this is just a tool for taking SahredPreference, it will take the cache address of the corresponding URL from SahredPreference, and then load it locally:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">loadChapterNovel</span><span class="hljs-params">(<span class="hljs-keyword">final</span> ReadHistory4Novel readHistory4Novel, String str, String str2, String str3, String str4, <span class="hljs-keyword">final</span> OnCommenCompleteListener onCommenCompleteListener, <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> z, <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> z2)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>        String str5 = <span class="hljs-keyword">new</span> URLPathMaker(<span class="hljs-keyword">this</span>.ctx, URLPathMaker.URL_ENUM.HttpUrlTypeNovelDownLoad).get_url(URLPathMaker.URL_ENUM.HttpUrlTypeNovelDownLoad, str3 + <span class="hljs-string">&quot;_&quot;</span> + str4);<br>        KLog.log(<span class="hljs-string">&quot;小说地址&quot;</span>, str5);<br>        String str6 = MyspUtils.getStr(<span class="hljs-keyword">this</span>.ctx, str5);<br>        KLog.log(<span class="hljs-string">&quot;str&quot;</span>, str6);<br>        <span class="hljs-keyword">if</span> (ZzTool.isNoEmpty(str6) &amp;&amp; onCommenCompleteListener != <span class="hljs-keyword">null</span>) &#123;...&#125;<br>   <span class="hljs-keyword">this</span>.mNovelHelper.getLocalLocalFile(getActivity(), str2, str3, str4, <span class="hljs-keyword">new</span> NovelHelper.OnLoadCompleteListener() &#123;<br>            <span class="hljs-meta">@Override</span> <span class="hljs-comment">// com.dmzj.manhua.novel.NovelHelper.OnLoadCompleteListener</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onComplete</span><span class="hljs-params">(String str, String str2)</span> </span>&#123;...&#125;<br>         &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>After the cache is not hit, the <code>NovelHelper.getLocalLocalFile()</code> method is called (this method will actually perform the download, but the name is… good coding practice). Therefore, the URL made earlier is only used to query the cache, and does not trigger the download behavior in this method.</p><p>In <code>NovelHelper</code>, we finally see the part of calculating two queries, the key is an MD5 encoding mixed with timestamps.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">goWebDownLoad</span><span class="hljs-params">(<span class="hljs-keyword">final</span> StepActivity stepActivity, String str, <span class="hljs-keyword">final</span> String str2, <span class="hljs-keyword">final</span> OnLoadCompleteListener onLoadCompleteListener)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!AppUtils.RELEASE) &#123;<br>            Log.d(<span class="hljs-string">&quot;novel_goWebDownLoad&quot;</span>, <span class="hljs-string">&quot;webpath = &quot;</span> + str);<br>        &#125;<br>        <span class="hljs-keyword">long</span> currentTimeMillis = System.currentTimeMillis() / <span class="hljs-number">1000</span>;<br>        String replace = str.replace(Api.NOVEL_URL, <span class="hljs-string">&quot;&quot;</span>);<br>        StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>        sb.append(str);<br>        sb.append(<span class="hljs-string">&quot;?t=&quot;</span>);<br>        sb.append(currentTimeMillis);<br>        sb.append(<span class="hljs-string">&quot;&amp;k=&quot;</span>);<br>        sb.append(MD5.MD5Encode(Api.NOVEL_KEY + replace + currentTimeMillis).toLowerCase());<br>        String sb2 = sb.toString();<br>        KLog.log(<span class="hljs-string">&quot;小说地址====&quot;</span>, sb2);<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p>Now we have a usable query.</p><img src="image-20220425134554616.png" alt="image-20220425134554616" style="zoom:50%;" /><h1 id="Make-an-eBook"><a href="#Make-an-eBook" class="headerlink" title="Make an eBook"></a>Make an eBook</h1><p>I have to admit that the recent API revision of DMZJ has indeed brought a lot of trouble to obtaining data. Fortunately, the obfuscation intensity of the client APK is very low, and its encryption logic and interface details can be obtained through decompilation. Now we have a complete data source, including book information (author, cover, region, tag, etc.), bibliographic information (volume, chapter), and the corresponding text for each chapter.</p><p>Here I used the npm module <code>epub-gen</code> to generate Epub eBooks. Since Epub also applies HTML and CSS typesetting, you only need to provide HTML chapter text and external CSS to generate Epub. The use of <a href="https://www.npmjs.com/package/epub-gen">epub-gen</a> is quite simple. You only need to specify some options and construct an Epub object from the list of objects in the chapters as the content to complete the e-book. generation. The module can also automatically download the picture in the url as the cover.</p><p>The code to generate the Epub eBook from the data structure obtained earlier is as follows:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> content = []<br>   volumes.forEach(<span class="hljs-function"><span class="hljs-params">vol</span> =&gt;</span> &#123;<br>       content.push(&#123;<br>           <span class="hljs-attr">title</span>: vol.volumeName,<br>           <span class="hljs-attr">data</span>: <span class="hljs-string">&quot;&quot;</span><br>       &#125;)<br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> chap <span class="hljs-keyword">of</span> vol.chapters) &#123;<br>           content.push(&#123;<br>               <span class="hljs-attr">title</span>: chap.chapterName,<br>               <span class="hljs-attr">data</span>: <span class="hljs-string">`&lt;div&gt;<span class="hljs-subst">$&#123;chap.text&#125;</span>/div`</span><br>           &#125;)<br>       &#125;<br>   &#125;)<br><br>   <span class="hljs-keyword">const</span> options = &#123;<br>       <span class="hljs-attr">title</span>: info.name,<br>       <span class="hljs-attr">author</span>: info.authors,<br>       <span class="hljs-attr">cover</span>: info.cover,<br>       <span class="hljs-attr">lang</span>: <span class="hljs-string">&quot;zh&quot;</span>,<br>       <span class="hljs-attr">tocTitle</span>: <span class="hljs-string">&quot;目录&quot;</span>,<br>       <span class="hljs-attr">content</span>: content,<br>       <span class="hljs-attr">verbose</span>: <span class="hljs-literal">true</span><br>   &#125;<br>   <br>   book = <span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> Epub(options, path.join(workingDir, <span class="hljs-string">`<span class="hljs-subst">$&#123;info.name&#125;</span>.epub`</span>))<br>   <span class="hljs-keyword">return</span> book<br></code></pre></td></tr></table></figure><img src="image-20220425162559469.png" alt="image-20220425162559469" style="zoom:50%;" /><p>Everything works perfectly…but <code>epub-gen</code> doesn’t actually support multi-level directories, which means, we get a volume-chapter two-level structure that cannot be generated into an epub….. . But it’s not a big problem. First of all, there are some workarounds, such as inserting empty pages in the <code>data</code> of the volume, and then adding other chapters; secondly, you can directly modify the <code>epub-gen</code>, which is beyond the scope of this article.</p>]]></content>
    
    
    
    <tags>
      
      <tag>JS</tag>
      
      <tag>Web</tag>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown Auto Translation</title>
    <link href="/StaticBlog/en/2021/10/09/hexo-i18n-by-article-translator/"/>
    <url>/StaticBlog/en/2021/10/09/hexo-i18n-by-article-translator/</url>
    
    <content type="html"><![CDATA[<p>When building a personal blog, we often have international needs. Technically, various blog frameworks have complete i18n solutions, so the biggest challenge for bloggers is content translation. Driven by artificial intelligence, machine translation has been quite perfect, and it is obviously no problem to meet the reading needs of readers in other languages, so a very realistic solution is to develop an automatic translation tool for your blog that calls machine translation API.</p><p>The address of this project: <a href="https://github.com/RandomNamer/MarkdownTranslator">https://github.com/RandomNamer/MarkdownTranslator</a></p><img src="image-20211012150904830.png" alt="image-20211012150904830" style="zoom:50%;" /><h1 id="development-process"><a href="#development-process" class="headerlink" title="development process"></a>development process</h1><p>In order to ensure the accuracy and reliability of the translation, I chose the Google Translate API here. Of course, due to the special network environment in mainland China, there are still a lot of troubles in the process of using Google Translate, although I don’t know when I just started developing it.</p><h2 id="Experiment-with-the-Markdown-format-that-Google-Translate-will-erase"><a href="#Experiment-with-the-Markdown-format-that-Google-Translate-will-erase" class="headerlink" title="Experiment with the Markdown format that Google Translate will erase"></a>Experiment with the Markdown format that Google Translate will erase</h2><p>Here I only tested some commonly used markdown format translations, and support for other special formats will continue to be developed.</p><ul><li>List item: the space between “-“ and the text will be removed</li><li>Code block: “`” will be removed from the code block</li><li>Inline code: will not change, but the content may be changed</li><li>The space between “#” and the text will be removed</li><li>Numbered list items: won’t be changed</li><li>Italic and bold: will not be destroyed</li><li>Link: Will not be broken</li></ul><h2 id="Get-Google-Translate-API"><a href="#Get-Google-Translate-API" class="headerlink" title="Get Google Translate API"></a>Get Google Translate API</h2><p>Google Translate is a paid service in Google Cloud. Although Google Translate comes with a $300 trial quota when registering, which is sufficient for personal translation purposes, it is not convenient to register a Google Cloud account with personal information and an international credit card. Here is an API used by the client of Google Translate: <code>https://translate.google.cn/translate_a/single</code>, the important query params mainly include:</p><ul><li>sl:</li><li>tl:</li><li>q:</li><li>tk:<br>Here is an implementation of Token calculation:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">token</span>(<span class="hljs-params">a</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> k = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">var</span> b = <span class="hljs-number">406644</span>;<br>    <span class="hljs-keyword">var</span> b1 = <span class="hljs-number">3293161072</span>;<br> <br>    <span class="hljs-keyword">var</span> jd = <span class="hljs-string">&quot;.&quot;</span>;<br>    <span class="hljs-keyword">var</span> sb = <span class="hljs-string">&quot;+-a^+6&quot;</span>;<br>    <span class="hljs-keyword">var</span> Zb = <span class="hljs-string">&quot;+-3^+b+-f&quot;</span>;<br> <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> e = [], f = <span class="hljs-number">0</span>, g = <span class="hljs-number">0</span>; g &lt; a.length; g++) &#123;<br>        <span class="hljs-keyword">var</span> m = a.charCodeAt(g);<br>        <span class="hljs-number">128</span> &gt; m ? e[f++] = m: (<span class="hljs-number">2048</span> &gt; m ? e[f++] = m &gt;&gt; <span class="hljs-number">6</span> | <span class="hljs-number">192</span> : (<span class="hljs-number">55296</span> == (m &amp; <span class="hljs-number">64512</span>) &amp;&amp; g + <span class="hljs-number">1</span> &lt; a.length &amp;&amp; <span class="hljs-number">56320</span> == (a.charCodeAt(g + <span class="hljs-number">1</span>) &amp; <span class="hljs-number">64512</span>) ? (m = <span class="hljs-number">65536</span> + ((m &amp; <span class="hljs-number">1023</span>) &lt;&lt; <span class="hljs-number">10</span>) + (a.charCodeAt(++g) &amp; <span class="hljs-number">1023</span>), e[f++] = m &gt;&gt; <span class="hljs-number">18</span> | <span class="hljs-number">240</span>, e[f++] = m &gt;&gt; <span class="hljs-number">12</span> &amp; <span class="hljs-number">63</span> | <span class="hljs-number">128</span>) : e[f++] = m &gt;&gt; <span class="hljs-number">12</span> | <span class="hljs-number">224</span>, e[f++] = m &gt;&gt; <span class="hljs-number">6</span> &amp; <span class="hljs-number">63</span> | <span class="hljs-number">128</span>), e[f++] = m &amp; <span class="hljs-number">63</span> | <span class="hljs-number">128</span>)<br>    &#125;<br>    a = b;<br>    <span class="hljs-keyword">for</span> (f = <span class="hljs-number">0</span>; f &lt; e.length; f++) a += e[f],<br>        a = RL(a, sb);<br>    a = RL(a, Zb);<br>    a ^= b1 || <span class="hljs-number">0</span>;<br>    <span class="hljs-number">0</span> &gt; a &amp;&amp; (a = (a &amp; <span class="hljs-number">2147483647</span>) + <span class="hljs-number">2147483648</span>);<br>    a %= <span class="hljs-number">1E6</span>;<br>    <span class="hljs-keyword">return</span> a.toString() + jd + (a ^ b)<br>&#125;;<br> <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">RL</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> t = <span class="hljs-string">&quot;a&quot;</span>;<br>    <span class="hljs-keyword">var</span> Yb = <span class="hljs-string">&quot;+&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> c = <span class="hljs-number">0</span>; c &lt; b.length - <span class="hljs-number">2</span>; c += <span class="hljs-number">3</span>) &#123;<br>        <span class="hljs-keyword">var</span> d = b.charAt(c + <span class="hljs-number">2</span>),<br>            d = d &gt;= t ? d.charCodeAt(<span class="hljs-number">0</span>) - <span class="hljs-number">87</span> : <span class="hljs-built_in">Number</span>(d),<br>            d = b.charAt(c + <span class="hljs-number">1</span>) == Yb ? a &gt;&gt;&gt; d: a &lt;&lt; d;<br>        a = b.charAt(c) == Yb ? a + d &amp; <span class="hljs-number">4294967295</span> : a ^ d<br>    &#125;<br>    <span class="hljs-keyword">return</span> a<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="Access-through-proxy"><a href="#Access-through-proxy" class="headerlink" title="Access through proxy"></a>Access through proxy</h3><p><strong>Notice!</strong> Node will not use the system proxy by default, which will cause network requests from Node to be blocked inside the wall even if the machine can already access the off-wall website through the proxy. At this time, we need to configure a proxy for Node before we can use Google Translate API normally. But for the network request library Axios that many people like to use, simply using the built-in proxy may not work for https sites like Google Translate. The basic solutions are:</p><ul><li>Use ProxyAgent, such as <a href="https://www.npmjs.com/package/tunnel">tunnel</a>,</li><li>Use modified version of Axios, <code>axios-https-proxy-fix</code></li><li>Use <code>request</code></li></ul><p>A ready-made Google Translate API package is <code>translate-google-api</code>, which can be installed directly via <code>npm install translate-google-api</code>. We can see the code in it, basically using axios to initiate a request using the API just now, but due to the bug that axios has on the https proxy, this module is basically unavailable in mainland China.</p><h3 id="Restrictions"><a href="#Restrictions" class="headerlink" title="Restrictions"></a>Restrictions</h3><p>This API is provided for the client of Google Translate, so it comes with anti-crawler settings. Generally speaking, one IP can completely translate an article, but the next one needs to switch to the next proxy address, otherwise error 429 will be returned.</p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>i18n</tag>
      
      <tag>JS</tag>
      
      <tag>Node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Build a static blog with Hexo and Github Pages</title>
    <link href="/StaticBlog/en/2021/09/30/blog-with-hexo-and-gh-pages/"/>
    <url>/StaticBlog/en/2021/09/30/blog-with-hexo-and-gh-pages/</url>
    
    <content type="html"><![CDATA[<h1 id="Build-a-static-blog-with-Hexo-and-Github-Pages"><a href="#Build-a-static-blog-with-Hexo-and-Github-Pages" class="headerlink" title="Build a static blog with Hexo and Github Pages"></a>Build a static blog with Hexo and Github Pages</h1><p>Personal blogs once had a high threshold, so a large number of online blog platforms emerged in the country at the beginning of the century. Once building a personal blog, you need to write your own back-end and front-end, get the domain name resolution service, and pay a lot of money to keep it running at a reasonable speed. In 2021, if you just want to experience your own blog, you don’t need to do this at all. For purely static display purposes (in fact, this is also the most basic and important use of blogs), only a (good-looking) static web page and a hosting platform are required. Github Pages is such a hosting platform. It relies on Github’s Repository, which is easy to use and free of charge. We can write a static front-end directly, push it to the remote end with Git, and then automatically complete the deployment. Hexo is such a static blog generation tool, which can be used to create static blogs more easily. Combine the two to complete your first blog in a few minutes.</p><h2 id="Set-up-GitHub-Pages"><a href="#Set-up-GitHub-Pages" class="headerlink" title="Set up GitHub Pages"></a>Set up GitHub Pages</h2><p>Create a new Repository in GitHub, and then enable Github Pages hosting in the settings.</p><img src="image-20210923153307744.png"  style="zoom:50%;" /><p>Using Theme-Chooser, you can generate a default page with the content filled in by a Markdown document. This markdown document also supports embedding HTML links.</p><img src="image-20210923153437095.png"  style="zoom:50%;" /><p>After simple adjustments, we can see a static web page that can be displayed normally, indicating that GitHub Pages has been created successfully.</p><img src="image-20210923153532574.png"  style="zoom:50%;" /><h2 id="Use-Hexo-to-generate-static-blogs"><a href="#Use-Hexo-to-generate-static-blogs" class="headerlink" title="Use Hexo to generate static blogs"></a>Use Hexo to generate static blogs</h2><p>Hexo is a tool that runs on Node.js. In order to use it, you must first make sure that Node has been installed.</p><img src="image-20210923153738209.png" style="zoom:50%;" /><p><code>npm</code> is Node’s package management tool, we can use it to install Hexo. (On macOS, if it is the first time to install Node, npm may lack file write permissions. You can use <code>sudo chown -R $USER /usr/local/lib/node_modules</code> to add permissions to solve it.)</p><p>If everything goes well, we can install Hexo using <code>npm install -g hexo-cli</code>.</p><p>After the installation is complete, we have the hexo command line tool, and a blog template can be initialized through <code>hexo init</code>:</p><img src="image-20210923160421280.png"  style="zoom:50%;" /><p>To compile it into a usable html page, execute <code>hexo generate</code>. To preview in the browser, you can use <code>hexo server</code> to open a server locally for preview.</p><img src="image-20210923161332399.png"  style="zoom:50%;" /><h2 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h2><p>A simple idea is to manually build the blog locally every time, and then push to GitHub to complete the update. But we need to send the constructed web page to the branch used by Github Pages, while the source code stays in another branch.</p><p>There are two recommended actions.</p><ul><li>Thanks to the CI function that GitHub can integrate, we don’t have to build manually every time, but ** let the CI system help us build and publish to GitHub<h1 id="After-Git-you-only-need-to-use-hexo-clean-amp-amp-hexo-deploy-to-complete-the-deployment-each-time"><a href="#After-Git-you-only-need-to-use-hexo-clean-amp-amp-hexo-deploy-to-complete-the-deployment-each-time" class="headerlink" title="After Git), you only need to use hexo clean &amp;&amp; hexo deploy to complete the deployment each time."></a>After Git), you only need to use <code>hexo clean &amp;&amp; hexo deploy</code> to complete the deployment each time.</h1></li></ul><h2 id="Workflow"><a href="#Workflow" class="headerlink" title="Workflow"></a>Workflow</h2><p>Here is a brief introduction on how to configure Deployer and the workflow of writing and publishing locally</p><h3 id="Deployer-configuration-and-use"><a href="#Deployer-configuration-and-use" class="headerlink" title="Deployer configuration and use"></a>Deployer configuration and use</h3><p>To use Deployer, you only need to configure four items in <code>_config.yml</code>, the following is an example configuration:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/RandomNamer/StaticBlogTest.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">gh-pages</span><br>  <span class="hljs-attr">message:</span> <span class="hljs-string">Update</span> <span class="hljs-string">pages</span> <span class="hljs-string">with</span> <span class="hljs-string">local</span> <span class="hljs-string">changes</span> <span class="hljs-string">on</span> &#123;&#123; <span class="hljs-string">now(&#x27;YYYY-MM-DD&#x27;)</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p>Just fill in the correct repo address, Github Pages branch and commit message.</p><p>The operation of the deployer is to generate it once, and then submit the generated file to the specified branch. The commit message is the previously configured <code>message</code>.</p><p>During deployment, you only need to execute <code>hexo clean &amp;&amp; hexo d</code> to synchronize the local website with the remote</p><h3 id="Load-resources-correctly"><a href="#Load-resources-correctly" class="headerlink" title="Load resources correctly"></a>Load resources correctly</h3><p>For the website to work correctly, the last step is needed, which is to configure the website URL in <code>_config.yml</code>. This URL determines the specific path for all links in the generated page to point to and load CSS, JS and other resource files. If it is not loaded properly, I am afraid it will be like this:</p><img src="image-20210930125831154.png"  style="zoom:50%;" /><p>After the correct configuration, perform another (generation and) deployment, and the correct web page can be viewed on GitHub Pages:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># URL</span><br><span class="hljs-comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">https://randomnamer.github.io/</span><br><span class="hljs-attr">root:</span> <span class="hljs-string">/StaticBlogTest/</span><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">:year/:month/:day/:title/</span><br><span class="hljs-attr">permalink_defaults:</span><br><span class="hljs-attr">pretty_urls:</span><br>  <span class="hljs-attr">trailing_index:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span><br>  <span class="hljs-attr">trailing_html:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span><br></code></pre></td></tr></table></figure><img src="image-20210930130025608.png"  style="zoom:50%;" /><h3 id="Write-an-article"><a href="#Write-an-article" class="headerlink" title="Write an article"></a>Write an article</h3><h4 id="Front-Matters"><a href="#Front-Matters" class="headerlink" title="Front Matters"></a>Front Matters</h4><p>Hexo uses markdown to write, or in other words, uses Markdown’s grammar to write. Hexo has a syntax called <a href="https://hexo.io/zh-cn/docs/front-matter">Front Matter</a>, which is used to customize each article to a certain extent, such as specifying the name of the page , Embed the cover image, specify the author and tag of the article, etc.</p><p>Front Matter can be written in yaml or JSON:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">Hello</span> <span class="hljs-string">World</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2013</span><span class="hljs-string">/7/13</span> <span class="hljs-number">20</span><span class="hljs-string">:46:25</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">;;;<br><span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;Hello World&quot;</span>,<br><span class="hljs-string">&quot;date&quot;</span>: <span class="hljs-string">&quot;2013/7/13 20:46:25&quot;</span><br>;;;<br></code></pre></td></tr></table></figure><h4 id="Integration-with-HTML"><a href="#Integration-with-HTML" class="headerlink" title="Integration with HTML"></a>Integration with HTML</h4><p>If you have used Typora, you will be impressed by the function of embedding HTML tags. It can make Markdown documents show rich styles that are not part of the Markdown specification, and can even embed the content of other web pages through iframes.</p><img src="image-20210930143453754.png" style="zoom:50%;" /><p>Hexo also fully supports embedded HTML, so that the article can not only have rich customization capabilities, but also be fully compatible with Typora.</p><h4 id="Local-writing-practice"><a href="#Local-writing-practice" class="headerlink" title="Local writing practice"></a>Local writing practice</h4><p>Hexo-cli provides a way to create new articles:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  StaticBlogTest git:(develop) ✗ hexo new ArticleTest<br>INFO  Validating config<br>INFO  Created: ~/Documents/GitHub/StaticBlogTest/source/_posts/ArticleTest.md<br></code></pre></td></tr></table></figure><p>By default, it will only create a markdown file in the specified folder. We can use any markdown editor to write, or copy the markdown file that has been written to the <code>source/_posts</code> path to form a new post.</p><p>After writing, you can use <code>hexo clean &amp;&amp; hexo s</code> to preview</p><h2 id="Use-theme"><a href="#Use-theme" class="headerlink" title="Use theme"></a>Use theme</h2><p>The charm of the front-end is that it is more convenient and free to design the appearance you want. Hexo also has a wealth of custom themes, and you can also develop your own custom themes.</p><p>There are a large number of topics on Github and Hexo official website</p><img src="image-20210930130535951.png" style="zoom:33%;" /><p>You only need to download the theme to the <code>themes</code> folder and quote the name of the theme (folder name) in <code>_config.yml</code> to use this theme. Different themes provide a wealth of configuration items, which can be further customized. At the same time, all themes are also built using standard front-end technology, and you can also modify and customize the themes yourself.</p><p>For example, for the theme <a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a> I use here, the content of the article page can only be placed on the right. By modifying its template, you can Define the layout, display the table of contents on the left, and make the text not forced to be centered (space-evenly).</p><h2 id="Summarize"><a href="#Summarize" class="headerlink" title="Summarize"></a>Summarize</h2><p>After a few hours, Hexo, a static blog generation framework, still gave me a lot of surprises. First of all, article writing is very easy. It can be done directly on the familiar Typora. Front-Matter also allows me to control the style of the article. In the past few years, there have been countless templates and plug-ins contributed by developers from all over the world, and many of them are eye-catching.</p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Blog</tag>
      
      <tag>Frontend</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/StaticBlog/en/2021/09/23/hello-world/"/>
    <url>/StaticBlog/en/2021/09/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
